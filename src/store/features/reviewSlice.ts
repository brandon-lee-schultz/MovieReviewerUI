// Import necessary modules and components from Redux Toolkit
import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { AddReview } from "apis/models/addReview";
import { Review } from "types/Review";

// Define the shape of the review state
interface ReviewState {
  reviews: Review[];
}

// Define the initial state for the review slice
const initialState: ReviewState = {
  reviews: [],
};

// Create an asynchronous thunk for fetching reviews
export const fetchReviews = createAsyncThunk("reviews/get", async () => {
  const response = await fetch("https://localhost:7175/Review", {
    method: 'GET',
  });

  const data = await response.json();

  return data;
});

// Create an asynchronous thunk for saving a review
export const saveReviews = createAsyncThunk("reviews/save", async (review: AddReview) => {
  const response = await fetch("https://localhost:7175/Review", {
    method: 'POST',
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(review),
  });

  const data = await response.json();

  return data;
});

// Create an asynchronous thunk for deleting a review
export const deleteReview = createAsyncThunk("reviews/delete", async (id: string) => {
  const response = await fetch("https://localhost:7175/Review", {
    method: 'DELETE',
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(id),
  });

  const data = await response.json();

  return data;
});

// Create a slice for managing reviews
export const ReviewSlice = createSlice({
  name: "reviews",
  initialState,
  reducers: {},
  extraReducers: (builder) => {
    // Handle the fulfilled action of fetchReviews
    builder.addCase(fetchReviews.fulfilled, (state, action) => {
      state.reviews = action.payload;
    });
  },
});

// Export the reducer generated by createSlice
export const ReviewReducer = ReviewSlice.reducer;
